"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

def get_fib_seq_up_to(n:int) -> int:
    """ return fibonacci sequence of numbers up to n
    (last number in returned sequence should not exceed n)"""
    fibs = [1,2]
    while True:
        next_fib = fibs[-2] + fibs[-1]
        if next_fib < n:
            fibs.append(next_fib)
        else:
            return fibs

def sum_of_evens(seq: list) -> int:
    return sum([i for i in seq if i%2==0])

if __name__ == "__main__":
    N = int(4e6)
    result = sum_of_evens(get_fib_seq_up_to(N))
    print(f"Sum of even fibs up to {N} is {result}")

# NOTE: could streamline this by only adding to fibs if fibs is even, but
#       then I have a function that seems awfully particular. like this better,
#       though this would be slower than that